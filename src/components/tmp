function JourneyStepCard({ step, index }: { step: JourneyStep; index: number }) {
  const isRightSide = index % 2 === 0;

  // Define animation for alternating sides
  const containerVariants = {
    hidden: { 
      opacity: 0, 
      x: isRightSide ? 150 : -150 // right side slides in from right, left side from left
    },
    visible: { 
      opacity: 1, 
      x: 0, 
      transition: { duration: 0.8, ease: "easeOut" } 
    },
  };

  return (
    <motion.div
      className="relative w-full flex my-20"
      variants={containerVariants}
      initial="hidden"
      whileInView="visible"
      viewport={{ amount: 0.3, once: true }} // animates once when in view
    >
      <div className={`w-1/2 ${isRightSide ? "pl-8" : "pr-8 ml-auto"}`}>
        <div
          style={{ willChange: "transform" }}
          className="relative w-full max-w-md text-center bg-gradient-to-br from-blue-200/40 to-purple-300/50 py-8 px-2 rounded-3xl backdrop-blur-lg shadow-md z-10 flex-col justify-center"
        >
          {/* Title */}
          <p className="text-4xl font-bold text-background chango-regular knewave-shadow -translate-y-14 absolute -translate-x-[50%] left-1/2 min-w-xl z-50">
            {step.title}
          </p>

          {/* Description */}
          <p className="text-foreground text-lg">{step.description}</p>

          {/* Date */}
          <p className="font-bold text-primary tracking-wider absolute translate-y-10 translate-x-4">
            {step.date}
          </p>
        </div>
      </div>
    </motion.div>
  );
}

function Journey() {
  return (
    <div id="journey" className="relative">
      {journeySteps.map((step, index) => (
        <JourneyStepCard key={index} step={step} index={index} />
      ))}
    </div>
  );
}

export default Journey;